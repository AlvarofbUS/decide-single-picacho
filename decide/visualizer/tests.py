
from base.tests import BaseTestCase
from django.contrib.auth.models import User
from voting.models import Question
from voting.models import QuestionOption
from voting.models import Voting

from django.conf import settings
# Generated by Selenium IDE

from django.test import TestCase
from django.contrib.staticfiles.testing import StaticLiveServerTestCase

from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from base.models import Auth

from base.tests import BaseTestCase
"""
    
class TestVisualizer_Selenium():
  idv=0
  def setup(self):
    
    self.driver=webdriver.Chrome()
    self.vars = {}
  
  def teardown(self):
    self.driver.quit()

#Test que comprueba que se muestra la vista de votos en un metodo normal, debe tener un voto normal previamente hecho y añadirla a la url del test
  def test_visualizer_normal(self):
    self.driver.get("http://127.0.0.1:8000/admin/login/?next=/admin/")
    self.driver.set_window_size(970, 518)
    self.driver.find_element(By.ID, "id_username").send_keys("decide")
    self.driver.find_element(By.ID, "id_password").send_keys("decide123")
    self.driver.find_element(By.ID, "content").click()
    self.driver.find_element(By.CSS_SELECTOR, ".login").click()
    self.driver.find_element(By.ID, "content").click()
    self.driver.find_element(By.CSS_SELECTOR, ".submit-row > input").click()
    self.driver.get("http://127.0.0.1:8000/visualizer/1/")
    assert self.driver.find_element(By.CSS_SELECTOR, "th:nth-child(3)").text == "Votos"
    elements = self.driver.find_elements(By.ID, "voteChart")
    assert len(elements) > 0
    self.driver.close()

#Test que comprueba que se muestra la vista de votos en el metodo de DHONT, debe tener un votación dhondt previamente hecho y añadir la id en la url del test
  def test_visualizer_dhont(self):
    self.driver.get("http://127.0.0.1:8000/admin/login/?next=/admin/")
    self.driver.set_window_size(970, 518)
    self.driver.find_element(By.ID, "id_username").send_keys("decide")
    self.driver.find_element(By.ID, "id_password").send_keys("decide123")
    self.driver.find_element(By.ID, "content").click()
    self.driver.find_element(By.CSS_SELECTOR, ".login").click()
    self.driver.find_element(By.ID, "content").click()
    self.driver.find_element(By.CSS_SELECTOR, ".submit-row > input").click()
    self.driver.get("http://127.0.0.1:8000/visualizer/3/")
    assert self.driver.find_element(By.CSS_SELECTOR, "th:nth-child(3)").text == "Votos"
    assert self.driver.find_element(By.CSS_SELECTOR, "th:nth-child(2)").text == "Escaños"
    elements = self.driver.find_elements(By.ID, "voteChart")
    assert len(elements) > 0
    elements = self.driver.find_elements(By.ID, "eschart")
    assert len(elements) > 0
    self.driver.close()

#Este test comprueba que sale el aviso de que la votacion a visualizar no ha comenzado
  def test_visualizer_creation(self):
    self.driver.get("http://127.0.0.1:8000/admin/login/?next=/admin/")
    self.driver.set_window_size(970, 518)
    self.driver.find_element(By.ID, "id_username").send_keys("decide")
    self.driver.find_element(By.ID, "id_password").send_keys("decide123")
    self.driver.find_element(By.CSS_SELECTOR, ".submit-row > input").click()
    self.driver.find_element(By.CSS_SELECTOR, ".model-question .addlink").click()
    self.driver.find_element(By.ID, "id_desc").send_keys("TESTSEL")
    self.driver.find_element(By.ID, "id_options-0-number").click()
    self.driver.find_element(By.ID, "id_options-0-number").send_keys("1")
    self.driver.find_element(By.ID, "id_options-0-option").click()
    self.driver.find_element(By.ID, "id_options-0-option").send_keys("1")
    self.driver.find_element(By.ID, "id_options-1-number").click()
    self.driver.find_element(By.ID, "id_options-1-number").send_keys("2")
    self.driver.find_element(By.ID, "id_options-1-option").click()
    self.driver.find_element(By.ID, "id_options-1-option").send_keys("2")
    self.driver.find_element(By.NAME, "_save").click()
    self.driver.find_element(By.LINK_TEXT, "Voting").click()
    self.driver.find_element(By.CSS_SELECTOR, ".model-voting .addlink").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "#id_auths > option:nth-child(2)")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    element = self.driver.find_element(By.ID, "id_auths")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    dropdown = self.driver.find_element(By.ID, "id_auths")
    ActionChains(dropdown).double_click(dropdown.find_element(By.XPATH, "//option[. = 'http://localhost:8000']"))
    self.driver.find_element(By.ID, "id_name").click()
    self.driver.find_element(By.ID, "id_name").send_keys("TEST")
    dropdown = self.driver.find_element(By.ID, "id_question")
    dropdown.find_element(By.XPATH, "//option[. = 'TESTSEL']").click()
    element = self.driver.find_element(By.ID, "id_question")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    element = self.driver.find_element(By.ID, "id_question")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.ID, "id_question")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    self.driver.find_element(By.ID, "id_escanios").send_keys("2")
    self.driver.find_element(By.ID, "id_escanios").click()
    element = self.driver.find_element(By.ID, "id_escanios")
    actions = ActionChains(self.driver)
    actions.double_click(element).perform()
    self.driver.find_element(By.NAME, "_save").click()
    self.driver.find_element(By.LINK_TEXT, "TEST").click()
    idv=self.find_id()
    self.driver.get("http://127.0.0.1:8000/visualizer/{}/".format(idv))
    self.driver.find_element(By.CSS_SELECTOR, ".voting").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "h2").text == "Votación no comenzada"
    self.driver.close()

  def find_id(self):
    url=self.driver.current_url
    idv=url.split("/")[6]
    return idv
    
#Este test comprueba que sale el aviso de que la votacion a visualizar está en curso
  
  def test_visualizer_start(self):
    
    self.driver.get("http://127.0.0.1:8000/admin/login/?next=/admin/")
    self.driver.set_window_size(970, 518)
    self.driver.find_element(By.ID, "id_username").send_keys("decide")
    self.driver.find_element(By.ID, "id_password").send_keys("decide123")

    self.driver.find_element(By.CSS_SELECTOR, ".submit-row > input").click()
    self.driver.find_element(By.LINK_TEXT, "Votings").click()
    self.driver.find_element(By.NAME, "_selected_action").click()
    dropdown = self.driver.find_element(By.NAME, "action")
    dropdown.find_element(By.XPATH, "//option[. = 'Start']").click()
    element = self.driver.find_element(By.NAME, "action")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    element = self.driver.find_element(By.NAME, "action")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.NAME, "action")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    self.driver.find_element(By.NAME, "index").click()

    self.driver.find_element(By.LINK_TEXT, "TEST").click()
    idv=self.find_id()
    self.driver.get("http://127.0.0.1:8000/visualizer/{}/".format(idv))
    self.driver.find_element(By.CSS_SELECTOR, "h2").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "h2").text == "Votación en curso"
    self.driver.close()

#Este test comprueba que sale el aviso de que la votacion a visualizar no se ha contado
  def test_visualizer_stop(self):
    self.driver.get("http://127.0.0.1:8000/admin/login/?next=/admin/")
    self.driver.set_window_size(970, 518)
    self.driver.find_element(By.ID, "id_username").send_keys("decide")
    self.driver.find_element(By.ID, "id_password").send_keys("decide123")

    self.driver.find_element(By.CSS_SELECTOR, ".submit-row > input").click()
    self.driver.find_element(By.LINK_TEXT, "Votings").click()
    self.driver.find_element(By.NAME, "_selected_action").click()
    dropdown = self.driver.find_element(By.NAME, "action")
    dropdown.find_element(By.XPATH, "//option[. = 'Stop']").click()
    element = self.driver.find_element(By.NAME, "action")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    element = self.driver.find_element(By.NAME, "action")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.NAME, "action")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    self.driver.find_element(By.NAME, "index").click()

    self.driver.find_element(By.LINK_TEXT, "TEST").click()
    idv=self.find_id()
    self.driver.get("http://127.0.0.1:8000/visualizer/{}/".format(idv))
    self.driver.find_element(By.CSS_SELECTOR, ".voting").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "h2").text == "Votación no contada"
    
    self.driver.close()

#Este test comprueba que la votacion a visualizar se visualiza bien
  def test_visualizer_tally(self):
    self.driver.get("http://127.0.0.1:8000/admin/login/?next=/admin/")
    self.driver.set_window_size(970, 518)
    self.driver.find_element(By.ID, "id_username").send_keys("decide")
    self.driver.find_element(By.ID, "id_password").send_keys("decide123")
    self.driver.find_element(By.CSS_SELECTOR, ".submit-row > input").click()
    
    self.driver.find_element(By.LINK_TEXT, "Votings").click()
    dropdown = self.driver.find_element(By.NAME, "action")
    dropdown.find_element(By.XPATH, "//option[. = 'Tally']").click()
    element = self.driver.find_element(By.NAME, "action")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    element = self.driver.find_element(By.NAME, "action")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.NAME, "action")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    self.driver.find_element(By.NAME, "_selected_action").click()
    self.driver.find_element(By.NAME, "index").click()
    self.driver.find_element(By.LINK_TEXT, "TEST").click()
    idv=self.find_id()
    self.driver.get("http://127.0.0.1:8000/visualizer/{}/".format(idv))
    self.driver.find_element(By.CSS_SELECTOR, ".heading").click()
    self.driver.find_element(By.CSS_SELECTOR, ".heading").click()
    self.driver.find_element(By.CSS_SELECTOR, ".heading").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".heading").text == "Resultados:"
    self.driver.close()


 """