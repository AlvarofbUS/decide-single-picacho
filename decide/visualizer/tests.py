
from base.tests import BaseTestCase
from django.contrib.auth.models import User
from voting.models import Question
from voting.models import QuestionOption
from voting.models import Voting
# Generated by Selenium IDE

from django.test import TestCase
from django.contrib.staticfiles.testing import StaticLiveServerTestCase

from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys

from base.tests import BaseTestCase
'''class TestVisualizer():
  def get_or_create_user(self,pk):
      user=User.objects.get_user(pk)
      user.username='user{}'.format(pk)
      user.set_password('qwerty')
      user.is_staff=True
      user.save()
     
      return user
 
    def create_voting(self):
        q = Question(desc='test question')
        q.save()
        for i in range(5):
            opt = QuestionOption(question=q, option='option {}'.format(i+1))
            opt.save()
        v = Voting(name='test voting', question=q)
        v.save()

        a, _ = Auth.objects.get_or_create(url=settings.BASEURL,
                                          defaults={'me': True, 'name': 'test auth'})
        a.save()
        v.auths.add(a)

        return v

    def create_voters(self, v):
        for i in range(100):
            u, _ = User.objects.get_or_create(username='testvoter{}'.format(i))
            u.is_active = True
            u.save()
            c = Census(voter_id=u.id, voting_id=v.id)
            c.save()

    def get_or_create_user(self, pk):
        user, _ = User.objects.get_or_create(pk=pk)
        user.username = 'user{}'.format(pk)
        user.set_password('qwerty')
        user.save()
        return user

    def store_votes(self, v):
        voters = list(Census.objects.filter(voting_id=v.id))
        voter = voters.pop()

        clear = {}
        for opt in v.question.options.all():
            clear[opt.number] = 0
            for i in range(random.randint(0, 5)):
                a, b = self.encrypt_msg(opt.number, v)
                data = {
                    'voting': v.id,
                    'voter': voter.voter_id,
                    'vote': { 'a': a, 'b': b },
                }
                clear[opt.number] += 1
                user = self.get_or_create_user(voter.voter_id)
                self.login(user=user.username)
                voter = voters.pop()
                mods.post('store', json=data)
        return clear

  def get_voting(self,pk):
      voting=j
'''
class TestVisualizer_Selenium():
  def setup(self):
    
    self.driver=webdriver.Chrome()
    self.vars = {}
  
  def teardown(self):
    self.driver.quit()

  def test_visualizer(self):
    self.driver.get("http://127.0.0.1:8000/admin/login/?next=/admin/")
    self.driver.set_window_size(970, 518)
    self.driver.find_element(By.ID, "id_username").send_keys("decide")
    self.driver.find_element(By.ID, "id_password").send_keys("decide123")
    self.driver.find_element(By.ID, "content").click()
    self.driver.find_element(By.CSS_SELECTOR, ".login").click()
    self.driver.find_element(By.ID, "content").click()
    self.driver.find_element(By.CSS_SELECTOR, ".submit-row > input").click()
    self.driver.get("http://127.0.0.1:8000/visualizer/1/")
    assert self.driver.find_element(By.CSS_SELECTOR, "th:nth-child(3)").text == "Votos"
    elements = self.driver.find_elements(By.ID, "voteChart")
    assert len(elements) > 0
    elements = self.driver.find_elements(By.ID, "eschart")
    assert len(elements) == 0
    self.driver.close()
'''
  def test_visualizer2(self):
    self.driver.get("http://127.0.0.1:8000/admin/login/?next=/admin/")
    self.driver.set_window_size(970, 518)
    self.driver.find_element(By.ID, "id_username").send_keys("decide")
    self.driver.find_element(By.ID, "id_password").send_keys("decide123")
    self.driver.find_element(By.ID, "content").click()
    self.driver.find_element(By.CSS_SELECTOR, ".login").click()
    self.driver.find_element(By.ID, "content").click()
    self.driver.find_element(By.CSS_SELECTOR, ".submit-row > input").click()
    self.driver.get("http://127.0.0.1:8000/visualizer/3/")
    assert self.driver.find_element(By.CSS_SELECTOR, "th:nth-child(3)").text == "Votos"
    assert self.driver.find_element(By.CSS_SELECTOR, "th:nth-child(2)").text == "EscaÃ±os"
    elements = self.driver.find_elements(By.ID, "voteChart")
    assert len(elements) > 0
    elements = self.driver.find_elements(By.ID, "eschart")
    assert len(elements) > 0
    self.driver.close()
    '''